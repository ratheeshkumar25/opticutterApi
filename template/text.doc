<!-- <!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Opti Cutter Payment Gateway</title>
    <!-- Add Stripe.js -->
    <script src="https://js.stripe.com/v3/"></script>

    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            border-radius: 8px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input[type="text"],
        input[type="number"] {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        #card-element {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background: white;
        }
        #card-errors {
            color: #dc3545;
            margin-top: 10px;
            font-size: 14px;
        }
        .submit-button {
            background: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
        }
        .submit-button:hover {
            background: #45a049;
        }
        .submit-button:disabled {
            background: #cccccc;
            cursor: not-allowed;
        }
        .success-message {
            color: green;
            font-size: 18px;
            font-weight: bold;
        }
        .error-message {
            color: red;
            font-size: 18px;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Opti Cutter Payment Gateway</h1>
        <form id="payment-form">
            <div class="form-group">
                <label for="order_id">Order ID</label>
                <input type="text" id="order_id" name="order_id" value="{{.orderID}}" readonly>
            </div>
            <div class="form-group">
                <label for="user_id">User ID</label>
                <input type="text" id="user_id" name="user_id" value="{{.userID}}" readonly>
            </div>
            <div class="form-group">
                <label for="amount">Amount ($)</label>
                <input type="number" id="amount" name="amount" value="{{.amount}}" readonly>
            </div>
            <div class="form-group">
                <label for="card-element">Credit or Debit Card</label>
                <div id="card-element"></div>
                <div id="card-errors" role="alert"></div>
            </div>
            <button type="submit" class="submit-button">Process Payment</button>
            <div id="payment-status"></div>
        </form>
    </div>

    <script>
        // Initialize Stripe with your publishable key
        const stripe = Stripe('pk_test_51QJM5zKsD205sLkAOOSpy4YZ3wDRpZ09sI8J6MgMekhLHAF6F5XRmLFzJnkrCoiwRkRsbCKvq0BJAR39jBAt0Xyx001rYvVoYI');
        const elements = stripe.elements();

        // Create card Element and mount it to the div
        const card = elements.create('card');
        card.mount('#card-element');

        // Handle real-time validation errors from the card Element
        card.addEventListener('change', function(event) {
            const displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
        });

        // Handle form submission
        const form = document.getElementById('payment-form');
        form.addEventListener('submit', async function(event) {
            event.preventDefault();

            const submitButton = form.querySelector('button');
            submitButton.disabled = true;
            submitButton.textContent = 'Processing...';

            try {
                // Create payment intent on the server
                const response = await fetch('/api/v1/user/payment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        order_id: document.getElementById('order_id').value,
                        user_id: document.getElementById('user_id').value,
                        amount: document.getElementById('amount').value
                    })
                });

                // Check if the response is successful
                if (!response.ok) {
                    throw new Error('Failed to create payment intent');
                }

                const responseData = await response.json();

                if (!responseData.clientSecret) {
                    throw new Error('Client secret missing in response');
                }

                // Confirm the payment with Stripe
                const result = await stripe.confirmCardPayment(responseData.clientSecret, {
                    payment_method: {
                        card: card,
                    }
                });

                // Handle the result of the payment confirmation
                if (result.error) {
                    // Show error message if payment fails
                    document.getElementById('payment-status').innerHTML = `<div class="error-message">Payment Failed: ${result.error.message}</div>`;
                } else if (result.paymentIntent.status === 'succeeded') {
                    // Show success message if payment is successful
                    document.getElementById('payment-status').innerHTML = `<div class="success-message">Payment Successful! Your payment ID is ${result.paymentIntent.id}</div>`;
                    // Optionally, you can redirect to a success page
                    window.location.href = `/api/v1/user/payment/success?payment_id=${result.paymentIntent.id}`;
                } else {
                    // Show incomplete message if payment is not yet completed
                    document.getElementById('payment-status').innerHTML = `<div class="error-message">Payment Incomplete: Please try again.</div>`;
                }
            } catch (error) {
                // Catch any errors and display them
                document.getElementById('payment-status').innerHTML = `<div class="error-message">Error: ${error.message}</div>`;
            } finally {
                // Enable the button again
                submitButton.disabled = false;
                submitButton.textContent = 'Process Payment';
            }
        });
    </script>
</body>
</html> -->


<!DOCTYPE html>
<html>
<head>
    <title>Chat</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f2f2f2;
            margin: 0;
            padding: 0;
        }
        #container {
            max-width: 600px;
            margin: 50px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #333;
            text-align: center;
        }
        #messages {
            list-style: none;
            padding: 0;
            margin: 0;
            height: 300px;
            overflow-y: scroll;
            border: 1px solid #ccc; 
            border-radius: 4px;
            padding: 10px;
            background-color: #f9f9f9;
        }
        #messages li {
            margin-bottom: 10px;
            padding: 5px 10px;
            border-radius: 4px;
        }
        .sender {
            background-color: #fff;
            text-align: right;
        }
        .receiver {
            background-color: #f0f0f0;
            text-align: left;
        }
        #chatbox {
            margin-top: 20px;
        }
        #messageInput {
            width: calc(100% - 70px);
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
            margin-right: 10px;
        }
        #sendButton {
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
        }
        #sendButton:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div id="container">
        <h1>Chat</h1>
        <ul id="messages">
            {{range .response}}
                {{if eq .User_ID $.id}} <!-- Use $.id instead of id -->
                    <li class="sender">{{.Content}}</li>
                {{else}}
                    <li class="receiver">{{.Content}}</li>
                {{end}}
            {{end}}
        </ul>
        

        <form id="chatbox">
            <textarea id="messageInput" placeholder="Type your message..."></textarea>
            <button id="sendButton" type="submit">Send</button>
        </form>
    </div>

    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script>
        $(function(){
            var socket = null;
            var msgBox = $("#messageInput");
            var messages = $("#messages");
            var typingIndicator = $("#typingIndicator");
            var typingTimeout;
            // console.log(range.history,"history");
            $("#chatbox").submit(function(event){
                event.preventDefault();
                if (!msgBox.val()) return false;
                if (!socket) {
                    alert("Error: There is no socket connection.");
                    return false;
                }

                var message = {
                    userId: parseInt(userId),
                    receiverId: parseInt(receiverId),
                    content: msgBox.val()
                };

                socket.send(JSON.stringify(message));
                msgBox.val("");
                return false;
            });
            if (!window["WebSocket"]) {
    alert("Error: Your browser does not support web sockets.")
} else {
    var urlParams = new URLSearchParams(window.location.search);
    var userId = urlParams.get('id');
    var receiverId = urlParams.get('receiverId');
    
    // Update the WebSocket URL to match with my local development setup
    var socketProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    var socketUrl = socketProtocol + "//" + window.location.host + "/api/v1/user/chat?id=" + userId + "&receiverId=" + receiverId;
    
    socket = new WebSocket(socketUrl);
    socket.onerror = function(error) {
        console.error("WebSocket error:", error);
    }
    socket.onopen = function() {
        console.log("WebSocket connection established");
    }
    socket.onclose = function() {
        console.log("WebSocket connection closed");
    }
    socket.onmessage = function(e) {
        var message = JSON.parse(e.data);
        var li = $("<li>").text(message.content);
        if (message.userId == userId) {
            li.addClass("sender");
        } else {
            li.addClass("receiver");
        }
        messages.append(li);
    }
}

            // if (!window["WebSocket"]) {
            //     alert("Error: Your browser does not support web sockets.")
            // } else {
            //     var urlParams = new URLSearchParams(window.location.search);
            //     var userId = urlParams.get('id');
            //     var receiverId = urlParams.get('receiverId');
                
            //     socket = new WebSocket("wss://www.golib.online/api/v1/user/chat?id=" + userId + "&receiverId=" + receiverId);
            //     socket.onerror = function(error) {
            //         console.error("WebSocket error:", error);
            //         // Handle the error here, potentially showing an error message or retrying connection
            //     }
            //     socket.onclose = function() {
            //         alert("Connection has been closed.");
            //     }
            //     socket.onmessage = function(e) {
            //         var message = JSON.parse(e.data);
            //         var li = $("<li>").text(message.content);
            //         if (message.userId == userId) {
            //             li.addClass("sender");
            //         } else {
            //             li.addClass("receiver");
            //         }
            //         messages.append(li);
            //     }
            // }
        });
    </script>
</body>
</html>


*****chatpage

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat Video Interface</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.1.2/dist/tailwind.min.css" rel="stylesheet">
  <style>
    .video-container {
      position: relative;
    }
    .local-video {
      position: absolute;
      bottom: 10px;
      right: 10px;
      width: 25%;
      height: 25%;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }
    .remote-video {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  </style>
</head>
<body class="bg-gray-100">

  <div id="chat-video-interface" class="flex flex-col h-screen max-w-4xl mx-auto bg-white shadow-lg">
    
    <div id="header" class="flex items-center justify-between p-4 border-b">
      <h1 class="text-xl font-semibold">Chat Room</h1>
      <div class="flex gap-2">
        <button id="start-end-video-call" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
          <span id="call-button-text">Start Call</span>
        </button>
      </div>
    </div>
    
    <div class="flex flex-1 overflow-hidden">
      <div id="chat-section" class="flex-1 flex flex-col">
        <div id="messages-container" class="flex-1 overflow-y-auto p-4 space-y-4">
          <!-- Chat messages will go here -->
        </div>

        <form id="message-form" class="p-4 border-t">
          <div class="flex gap-2">
            <input id="message-input" type="text" placeholder="Type a message..." class="flex-1 p-2 border rounded">
            <button id="send-message-btn" type="submit" class="bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
              Send
            </button>
          </div>
        </form>
      </div>

      <div id="video-section" class="w-1/2 border-l flex flex-col hidden">
        <div class="video-container">
          <video id="remote-video" class="remote-video" autoplay playsinline></video>
          <video id="local-video" class="local-video" autoplay playsinline muted></video>
        </div>
      </div>
    </div>

    <div id="error-message" class="p-4 bg-red-100 text-red-700 flex justify-between items-center hidden">
      <span id="error-text">Error Message</span>
      <button id="close-error-btn">
        <span>X</span>
      </button>
    </div>
    
  </div>

  <script>
    const socketUrl = `ws://${window.location.host}/api/v1/user/chat?id=${new URLSearchParams(window.location.search).get('id')}&receiverId=${new URLSearchParams(window.location.search).get('receiverId')}`;
    let socket = null;
    let isVideoEnabled = false;
    let isConnected = false;
    let localStream = null;
    let peerConnection = null;
    const userId = new URLSearchParams(window.location.search).get('id');
    const receiverId = new URLSearchParams(window.location.search).get('receiverId');

    // DOM Elements
    const messageInput = document.getElementById("message-input");
    const messagesContainer = document.getElementById("messages-container");
    const messageForm = document.getElementById("message-form");
    const sendMessageBtn = document.getElementById("send-message-btn");
    const startEndVideoCallBtn = document.getElementById("start-end-video-call");
    const videoSection = document.getElementById("video-section");
    const callButtonText = document.getElementById("call-button-text");
    const remoteVideo = document.getElementById("remote-video");
    const localVideo = document.getElementById("local-video");
    const errorMessage = document.getElementById("error-message");
    const errorText = document.getElementById("error-text");
    const closeErrorBtn = document.getElementById("close-error-btn");

    const initializeWebSocket = () => {
      socket = new WebSocket(socketUrl);

      socket.onopen = () => {
        isConnected = true;
        console.log('Connected to WebSocket');
      };

      socket.onclose = () => {
        isConnected = false;
        console.log('Disconnected from WebSocket');
        showError("Connection closed. Attempting to reconnect...");
        setTimeout(initializeWebSocket, 3000);
      };

      socket.onerror = () => {
        showError("Connection error occurred");
      };
      
      
      socket.onmessage = (event) => {
  try {
    const data = event.data.trim();  // Trim any extra spaces
    if (!data) {
      console.warn("Received empty message from server.");
      return;  // Skip if message is empty
    }

    const parsedData = JSON.parse(data);  // Try to parse the message
    if (parsedData) {
      if (parsedData.type === "video") {
        handleVideoSignal(parsedData);
      } else {
        handleChatMessage(parsedData);
      }
    }
  } catch (err) {
    console.error("Error parsing message:", err, "Raw message:", event.data);
  }
};
};

    //   socket.onmessage = (event) => {
    //     try {
    //       const data = JSON.parse(event.data);
    //       if (data.type === "video") {
    //         handleVideoSignal(data);
    //       } else {
    //         handleChatMessage(data);
    //       }
    //     } catch (err) {
    //       console.error('Error parsing message:', err);
    //     }
    //   };
    // };

    const handleChatMessage = (message) => {
      const messageElement = document.createElement("div");
      messageElement.classList.add("flex", message.sender === 'me' ? "justify-end" : "justify-start");
      messageElement.innerHTML = `
        <div class="max-w-[70%] rounded-lg p-3 ${message.sender === 'me' ? "bg-blue-500 text-white" : "bg-gray-100 text-gray-900"}">
          ${message.content}
        </div>
      `;
      messagesContainer.appendChild(messageElement);
    };

    const sendMessage = (e) => {
      e.preventDefault();
      const newMessage = messageInput.value.trim();
      if (!newMessage || !isConnected) return;

      const message = {
        userId: parseInt(userId),
        receiverId: parseInt(receiverId),
        content: newMessage,
        type: 'chat',
      };

      socket.send(JSON.stringify(message));
      messageInput.value = '';
    };

    const startVideoCall = async () => {
      try {
        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        localVideo.srcObject = localStream;

        peerConnection = new RTCPeerConnection({ iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] });

        localStream.getTracks().forEach(track => {
          peerConnection.addTrack(track, localStream);
        });

        peerConnection.onicecandidate = (event) => {
          if (event.candidate) {
            sendVideoSignal({ type: 'video', subtype: 'ice-candidate', candidate: event.candidate });
          }
        };

        peerConnection.ontrack = (event) => {
          remoteVideo.srcObject = event.streams[0];
        };

        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);

        sendVideoSignal({ type: 'video', subtype: 'offer', sdp: offer });
        videoSection.classList.remove("hidden");
        isVideoEnabled = true;
        callButtonText.textContent = "End Call";
      } catch (err) {
        showError("Failed to start video call: " + err.message);
      }
    };

    const handleVideoSignal = async (signal) => {
      try {
        if (signal.subtype === 'offer') {
          await peerConnection.setRemoteDescription(new RTCSessionDescription(signal.sdp));
          const answer = await peerConnection.createAnswer();
          await peerConnection.setLocalDescription(answer);
          sendVideoSignal({ type: 'video', subtype: 'answer', sdp: answer });
        } else if (signal.subtype === 'answer') {
          await peerConnection.setRemoteDescription(new RTCSessionDescription(signal.sdp));
        } else if (signal.subtype === 'ice-candidate') {
          await peerConnection.addIceCandidate(new RTCIceCandidate(signal.candidate));
        }
      } catch (err) {
        showError("Video call error: " + err.message);
      }
    };

    const sendVideoSignal = (signal) => {
      if (socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify(signal));
      }
    };

    const endVideoCall = () => {
      if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
      }
      if (peerConnection) {
        peerConnection.close();
      }
      videoSection.classList.add("hidden");
      isVideoEnabled = false;
      callButtonText.textContent = "Start Call";
    };

    const showError = (message) => {
      errorText.textContent = message;
      errorMessage.classList.remove("hidden");
    };

    startEndVideoCallBtn.addEventListener('click', () => {
      if (isVideoEnabled) {
        endVideoCall();
      } else {
        startVideoCall();
      }
    });

    messageForm.addEventListener('submit', sendMessage);

    closeErrorBtn.addEventListener('click', () => {
      errorMessage.classList.add("hidden");
    });

    // Initialize WebSocket connection
    initializeWebSocket();
  </script>

</body>
</html>


*********************************

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat Room</title>
  <script src="https://cdn.jsdelivr.net/npm/lucide-icons@0.215.0/dist/index.min.js"></script>
  <style>
    /* Styles for your chat layout */
    .chat-container {
      display: flex;
      flex-direction: column;
      height: 100vh;
      max-width: 1000px;
      margin: auto;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 16px;
      border-bottom: 2px solid #ddd;
    }

    .messages {
      flex: 1;
      overflow-y: auto;
      padding: 16px;
      display: flex;
      flex-direction: column;
    }

    .message {
      max-width: 70%;
      padding: 10px;
      border-radius: 8px;
      margin: 4px 0;
    }

    .message.me {
      background-color: #4caf50;
      color: white;
      align-self: flex-end;
    }

    .message.them {
      background-color: #f1f1f1;
      color: #333;
      align-self: flex-start;
    }

    .input-area {
      display: flex;
      padding: 16px;
      border-top: 2px solid #ddd;
    }

    .input-area input {
      flex: 1;
      padding: 8px;
      border-radius: 4px;
      border: 1px solid #ccc;
    }

    .input-area button {
      background-color: #007bff;
      color: white;
      padding: 8px 16px;
      border-radius: 4px;
      border: none;
      cursor: pointer;
      margin-left: 8px;
    }

    .video-call-button {
      background-color: #007bff;
      color: white;
      padding: 8px 16px;
      border-radius: 4px;
      border: none;
      cursor: pointer;
    }

    .video-container {
      display: flex;
      margin-top: 16px;
      display: none;
    }

    .video-container video {
      width: 48%;
      border: 2px solid #ddd;
      margin-right: 4%;
    }
  </style>
</head>
<body>

  <div class="chat-container">
    <div class="header">
      <h2>Chat Room</h2>
      <button id="video-call-button" class="video-call-button">Start Video Call</button>
    </div>

    <div id="messages" class="messages"></div>

    <div class="input-area">
      <input type="text" id="message-input" placeholder="Type a message..." />
      <button id="send-button">Send</button>
    </div>

    <!-- Video container -->
    <div class="video-container" id="video-container">
      <video id="local-video" autoplay muted></video>
      <video id="remote-video" autoplay></video>
    </div>
  </div>

  <script>
    let socket;
    const userId = new URLSearchParams(window.location.search).get('id');
    const receiverId = new URLSearchParams(window.location.search).get('receiverId');
    const messagesDiv = document.getElementById('messages');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const videoCallButton = document.getElementById('video-call-button');
    
    let isVideoCallActive = false;

    // Establish WebSocket connection
    const initializeWebSocket = () => {
      const socketUrl = `ws://${window.location.host}/api/v1/user/chat?id=${userId}&receiverId=${receiverId}`;
      socket = new WebSocket(socketUrl);

      socket.onopen = () => {
        console.log("WebSocket connected!");
      };


      socket.onmessage = (event) => {
        try {
          if (event.data.trim()) {
            const data = JSON.parse(event.data);
            if (data && data.type === 'chat') {
              displayMessage(data);
            }
          } else {
            console.warn("Received empty WebSocket message");
          }
        } catch (error) {
          console.error("Error parsing WebSocket message:", error);
        }
      };

      socket.onclose = () => {
        console.log("WebSocket closed, attempting to reconnect...");
        setTimeout(initializeWebSocket, 3000);  // Retry connection after 3 seconds
      };

      socket.onerror = (error) => {
        console.error("WebSocket error:", error);
      };
    };

    // Display incoming message
    const displayMessage = (message) => {
      const messageDiv = document.createElement('div');
      messageDiv.classList.add('message');
      messageDiv.classList.add(message.userId === parseInt(userId) ? 'me' : 'them');
      messageDiv.textContent = message.content;
      messagesDiv.appendChild(messageDiv);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;  // Scroll to bottom
    };
    
    // Send message to server
    const sendMessage = () => {
      const messageContent = messageInput.value.trim();
      if (!messageContent || !socket || socket.readyState !== WebSocket.OPEN) return;

      const message = {
        userId: parseInt(userId),
        receiverId: parseInt(receiverId),
        content: messageContent,
        type: 'chat',
      };

      // Display the message immediately in the chat history
      displayMessage(message);

      // Send the message to the WebSocket server
      socket.send(JSON.stringify(message));
      console.log()

      // Clear the input field
      messageInput.value = '';
    };

    // Handle send button click
    sendButton.addEventListener('click', sendMessage);

    // Handle Enter key in message input
    messageInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });

    // Handle video call button click
    videoCallButton.addEventListener('click', () => {
      if (!isVideoCallActive) {
        startVideoCall();
      } else {
        endVideoCall();
      }
    });

    // Video call functions (placeholders for now)
    const startVideoCall = () => {
      console.log("Starting video call...");
      // Show video container
      document.getElementById("video-container").style.display = "flex";
      videoCallButton.textContent = "End Video Call";
      isVideoCallActive = true;
    };

    const endVideoCall = () => {
      console.log("Ending video call...");
      // Hide video container
      document.getElementById("video-container").style.display = "none";
      videoCallButton.textContent = "Start Video Call";
      isVideoCallActive = false;
    };

    // Initialize WebSocket on page load
    window.onload = () => {
      initializeWebSocket();
    };
  </script>
</body>
</html> -->
