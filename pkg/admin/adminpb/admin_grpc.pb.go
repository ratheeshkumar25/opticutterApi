// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: admin.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminService_AdminLoginRequest_FullMethodName = "/pb.AdminService/AdminLoginRequest"
	AdminService_AdminBlockUser_FullMethodName    = "/pb.AdminService/AdminBlockUser"
	AdminService_AdminUnblockUser_FullMethodName  = "/pb.AdminService/AdminUnblockUser"
	AdminService_AddMaterial_FullMethodName       = "/pb.AdminService/AddMaterial"
	AdminService_FindMaterialByID_FullMethodName  = "/pb.AdminService/FindMaterialByID"
	AdminService_FindAllMaterial_FullMethodName   = "/pb.AdminService/FindAllMaterial"
	AdminService_EditMaterial_FullMethodName      = "/pb.AdminService/EditMaterial"
	AdminService_RemoveMaterial_FullMethodName    = "/pb.AdminService/RemoveMaterial"
	AdminService_FindAllItem_FullMethodName       = "/pb.AdminService/FindAllItem"
	AdminService_OrderHistory_FullMethodName      = "/pb.AdminService/OrderHistory"
	AdminService_FindOrder_FullMethodName         = "/pb.AdminService/FindOrder"
	AdminService_FindOrdersByUser_FullMethodName  = "/pb.AdminService/FindOrdersByUser"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	AdminLoginRequest(ctx context.Context, in *AdminLogin, opts ...grpc.CallOption) (*AdminResponse, error)
	AdminBlockUser(ctx context.Context, in *AdID, opts ...grpc.CallOption) (*AdminResponse, error)
	AdminUnblockUser(ctx context.Context, in *AdID, opts ...grpc.CallOption) (*AdminResponse, error)
	// Service to handle material management
	AddMaterial(ctx context.Context, in *AdminMaterial, opts ...grpc.CallOption) (*AdminResponse, error)
	FindMaterialByID(ctx context.Context, in *AdminMaterialID, opts ...grpc.CallOption) (*AdminMaterial, error)
	FindAllMaterial(ctx context.Context, in *AdminItemNoParams, opts ...grpc.CallOption) (*AdminMaterialList, error)
	EditMaterial(ctx context.Context, in *AdminMaterial, opts ...grpc.CallOption) (*AdminMaterial, error)
	RemoveMaterial(ctx context.Context, in *AdminMaterialID, opts ...grpc.CallOption) (*AdminResponse, error)
	// Service to handle item management
	FindAllItem(ctx context.Context, in *AdminItemNoParams, opts ...grpc.CallOption) (*AdminItemList, error)
	// Service to handle orders
	OrderHistory(ctx context.Context, in *AdminItemNoParams, opts ...grpc.CallOption) (*AdminOrderList, error)
	FindOrder(ctx context.Context, in *AdminItemID, opts ...grpc.CallOption) (*AdminOrder, error)
	FindOrdersByUser(ctx context.Context, in *AdminItemID, opts ...grpc.CallOption) (*AdminOrderList, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) AdminLoginRequest(ctx context.Context, in *AdminLogin, opts ...grpc.CallOption) (*AdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, AdminService_AdminLoginRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AdminBlockUser(ctx context.Context, in *AdID, opts ...grpc.CallOption) (*AdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, AdminService_AdminBlockUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AdminUnblockUser(ctx context.Context, in *AdID, opts ...grpc.CallOption) (*AdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, AdminService_AdminUnblockUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddMaterial(ctx context.Context, in *AdminMaterial, opts ...grpc.CallOption) (*AdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, AdminService_AddMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FindMaterialByID(ctx context.Context, in *AdminMaterialID, opts ...grpc.CallOption) (*AdminMaterial, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminMaterial)
	err := c.cc.Invoke(ctx, AdminService_FindMaterialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FindAllMaterial(ctx context.Context, in *AdminItemNoParams, opts ...grpc.CallOption) (*AdminMaterialList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminMaterialList)
	err := c.cc.Invoke(ctx, AdminService_FindAllMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) EditMaterial(ctx context.Context, in *AdminMaterial, opts ...grpc.CallOption) (*AdminMaterial, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminMaterial)
	err := c.cc.Invoke(ctx, AdminService_EditMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveMaterial(ctx context.Context, in *AdminMaterialID, opts ...grpc.CallOption) (*AdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FindAllItem(ctx context.Context, in *AdminItemNoParams, opts ...grpc.CallOption) (*AdminItemList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminItemList)
	err := c.cc.Invoke(ctx, AdminService_FindAllItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) OrderHistory(ctx context.Context, in *AdminItemNoParams, opts ...grpc.CallOption) (*AdminOrderList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminOrderList)
	err := c.cc.Invoke(ctx, AdminService_OrderHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FindOrder(ctx context.Context, in *AdminItemID, opts ...grpc.CallOption) (*AdminOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminOrder)
	err := c.cc.Invoke(ctx, AdminService_FindOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FindOrdersByUser(ctx context.Context, in *AdminItemID, opts ...grpc.CallOption) (*AdminOrderList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminOrderList)
	err := c.cc.Invoke(ctx, AdminService_FindOrdersByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility.
type AdminServiceServer interface {
	AdminLoginRequest(context.Context, *AdminLogin) (*AdminResponse, error)
	AdminBlockUser(context.Context, *AdID) (*AdminResponse, error)
	AdminUnblockUser(context.Context, *AdID) (*AdminResponse, error)
	// Service to handle material management
	AddMaterial(context.Context, *AdminMaterial) (*AdminResponse, error)
	FindMaterialByID(context.Context, *AdminMaterialID) (*AdminMaterial, error)
	FindAllMaterial(context.Context, *AdminItemNoParams) (*AdminMaterialList, error)
	EditMaterial(context.Context, *AdminMaterial) (*AdminMaterial, error)
	RemoveMaterial(context.Context, *AdminMaterialID) (*AdminResponse, error)
	// Service to handle item management
	FindAllItem(context.Context, *AdminItemNoParams) (*AdminItemList, error)
	// Service to handle orders
	OrderHistory(context.Context, *AdminItemNoParams) (*AdminOrderList, error)
	FindOrder(context.Context, *AdminItemID) (*AdminOrder, error)
	FindOrdersByUser(context.Context, *AdminItemID) (*AdminOrderList, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) AdminLoginRequest(context.Context, *AdminLogin) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLoginRequest not implemented")
}
func (UnimplementedAdminServiceServer) AdminBlockUser(context.Context, *AdID) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminBlockUser not implemented")
}
func (UnimplementedAdminServiceServer) AdminUnblockUser(context.Context, *AdID) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUnblockUser not implemented")
}
func (UnimplementedAdminServiceServer) AddMaterial(context.Context, *AdminMaterial) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMaterial not implemented")
}
func (UnimplementedAdminServiceServer) FindMaterialByID(context.Context, *AdminMaterialID) (*AdminMaterial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMaterialByID not implemented")
}
func (UnimplementedAdminServiceServer) FindAllMaterial(context.Context, *AdminItemNoParams) (*AdminMaterialList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllMaterial not implemented")
}
func (UnimplementedAdminServiceServer) EditMaterial(context.Context, *AdminMaterial) (*AdminMaterial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMaterial not implemented")
}
func (UnimplementedAdminServiceServer) RemoveMaterial(context.Context, *AdminMaterialID) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMaterial not implemented")
}
func (UnimplementedAdminServiceServer) FindAllItem(context.Context, *AdminItemNoParams) (*AdminItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllItem not implemented")
}
func (UnimplementedAdminServiceServer) OrderHistory(context.Context, *AdminItemNoParams) (*AdminOrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderHistory not implemented")
}
func (UnimplementedAdminServiceServer) FindOrder(context.Context, *AdminItemID) (*AdminOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOrder not implemented")
}
func (UnimplementedAdminServiceServer) FindOrdersByUser(context.Context, *AdminItemID) (*AdminOrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOrdersByUser not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}
func (UnimplementedAdminServiceServer) testEmbeddedByValue()                      {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_AdminLoginRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AdminLoginRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AdminLoginRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AdminLoginRequest(ctx, req.(*AdminLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AdminBlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AdminBlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AdminBlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AdminBlockUser(ctx, req.(*AdID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AdminUnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AdminUnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AdminUnblockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AdminUnblockUser(ctx, req.(*AdID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminMaterial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddMaterial(ctx, req.(*AdminMaterial))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FindMaterialByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminMaterialID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FindMaterialByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_FindMaterialByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FindMaterialByID(ctx, req.(*AdminMaterialID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FindAllMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminItemNoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FindAllMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_FindAllMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FindAllMaterial(ctx, req.(*AdminItemNoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_EditMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminMaterial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).EditMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_EditMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).EditMaterial(ctx, req.(*AdminMaterial))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminMaterialID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveMaterial(ctx, req.(*AdminMaterialID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FindAllItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminItemNoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FindAllItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_FindAllItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FindAllItem(ctx, req.(*AdminItemNoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_OrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminItemNoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).OrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_OrderHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).OrderHistory(ctx, req.(*AdminItemNoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FindOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FindOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_FindOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FindOrder(ctx, req.(*AdminItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FindOrdersByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FindOrdersByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_FindOrdersByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FindOrdersByUser(ctx, req.(*AdminItemID))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminLoginRequest",
			Handler:    _AdminService_AdminLoginRequest_Handler,
		},
		{
			MethodName: "AdminBlockUser",
			Handler:    _AdminService_AdminBlockUser_Handler,
		},
		{
			MethodName: "AdminUnblockUser",
			Handler:    _AdminService_AdminUnblockUser_Handler,
		},
		{
			MethodName: "AddMaterial",
			Handler:    _AdminService_AddMaterial_Handler,
		},
		{
			MethodName: "FindMaterialByID",
			Handler:    _AdminService_FindMaterialByID_Handler,
		},
		{
			MethodName: "FindAllMaterial",
			Handler:    _AdminService_FindAllMaterial_Handler,
		},
		{
			MethodName: "EditMaterial",
			Handler:    _AdminService_EditMaterial_Handler,
		},
		{
			MethodName: "RemoveMaterial",
			Handler:    _AdminService_RemoveMaterial_Handler,
		},
		{
			MethodName: "FindAllItem",
			Handler:    _AdminService_FindAllItem_Handler,
		},
		{
			MethodName: "OrderHistory",
			Handler:    _AdminService_OrderHistory_Handler,
		},
		{
			MethodName: "FindOrder",
			Handler:    _AdminService_FindOrder_Handler,
		},
		{
			MethodName: "FindOrdersByUser",
			Handler:    _AdminService_FindOrdersByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
